// <auto-generated />
using System;
using CostItArchitecture.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(CostItDbcontext))]
    [Migration("20230213201042_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Estimate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FInishingQty")
                        .HasColumnType("int");

                    b.Property<string>("Finishing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinishingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Impression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ImpressionPrice")
                        .HasColumnType("float");

                    b.Property<int>("ImpressionQty")
                        .HasColumnType("int");

                    b.Property<double>("OtherPrice")
                        .HasColumnType("float");

                    b.Property<int>("OtherQty")
                        .HasColumnType("int");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PaperPrice")
                        .HasColumnType("float");

                    b.Property<int>("PaperQty")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PlatePrice")
                        .HasColumnType("float");

                    b.Property<int>("PlateQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialPrice")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EstimateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("EstimateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Estimate", b =>
                {
                    b.HasOne("CostItArchitecture.Domain.Models.Customer", "Customers")
                        .WithMany("Estimates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.User", b =>
                {
                    b.HasOne("CostItArchitecture.Domain.Models.Estimate", "Estimate")
                        .WithMany("Users")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Customer", b =>
                {
                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("CostItArchitecture.Domain.Models.Estimate", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
